#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
	default-lazy-init="false">

	<!--<util:properties id="sys" location="classpath*:/sys.properties"></util:properties>-->

	<!-- 加载配置属性文件 ，获取jdbc等相关信息,db中已经有了，本处就省略了 -->
	<!--<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
		<!--<property name="locations">-->
			<!--<list>-->
				<!--<value>classpath*:db.properties</value>-->
			<!--</list>-->
		<!--</property>-->
	<!--</bean>-->

	 <!-- <context:property-placeholder location="classpath:dsp.properties" /> -->


	<!-- @Value("${symbol_pound}{sysProp['debug']}") -->
	<bean id="sysProp" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath*:db.properties</value>
				<!--<value>classpath*:sys.properties</value>-->
				<!--<value>classpath*:dsp.properties</value>-->
				<!--<value>classpath*:redis.properties</value>-->
				<!--&lt;!&ndash;模拟配置 &ndash;&gt;-->
				<!--<value>classpath*:similar.properties</value>-->
			</list>
		</property>
	</bean>
	<!-- @Value("${symbol_dollar}{debug}") -->
	<bean id="sys" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
		<property name="properties" ref="sysProp" />
	</bean>

	<import resource="classpath*:spring-db.xml"/>

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!--<bean class="com.zzcm.log.quartz.QuartzBean" init-method="init" lazy-init="false"/>-->

	<!-- JSR303 Validator定义 -->
 	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<!-- Spring3.1之前的注解 HandlerAdapter -->
	<!--<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>-->
	<!--<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>-->

	<!--Spring3.1开始的注解 HandlerAdapter -->
	<!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>-->
	<!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/>-->

	<!--<bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" lazy-init="false"/>-->

	<!-- 支持上传文件 -->
	<bean id="multipartResolver"
		  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="104857600"/>
	</bean>

	<bean id="taskExecutor"  class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数，默认为1 -->
		<property name="corePoolSize" value="50" />
		<!-- 最大线程数，默认为Integer.MAX_VALUE -->
		<property name="maxPoolSize" value="500" />
		<!-- 线程池维护线程所允许的空闲时间，默认为60s -->
		<property name="keepAliveSeconds" value="300" />
		<!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->
		<property name="rejectedExecutionHandler">
			<!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
			<!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
			<!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
			<!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
			<bean class="java.util.concurrent.ThreadPoolExecutor${symbol_dollar}CallerRunsPolicy" />
		</property>
	</bean>

	<!--<bean id="captchaEngine" class="com.yj.pf.core.captcha.YJImgCaptchaEngine"/>-->
	<!--<bean id="captchaService" class="com.octo.captcha.service.image.DefaultManageableImageCaptchaService" scope="singleton">-->
		<!--<property name="captchaEngine" ref="captchaEngine"/>-->
	<!--</bean>-->

	<!-- AOP自动注解功能 -->
	<!--<aop:aspectj-autoproxy />-->
</beans>